#!/bin/bash
# -*- shell-script -*-
PKG_VERSION=`(cd src; lua -e "local Version=require('Version'); print(Version.name())") | awk '{print $1}'`
echo Making Version: $PKG_VERSION

make_install()
{
  if [ "$BUILD_TYPE" != "EXPERIMENTAL" ]; then
    $SUDO $MAKE install     $MAKE_EXTRA
  else
    echo "$SUDO $MAKE pre-install $MAKE_EXTRA"
    $SUDO $MAKE pre-install $MAKE_EXTRA
    $SUDO rm -f $BASE_DIR/lmod/EXPERIMENTAL
    $SUDO ln -s $PKG_VERSION $BASE_DIR/lmod/EXPERIMENTAL
  fi
}

runMe()
{
  local cmdA=("$@")

  local j
  local jj
  local i
  local ignoreError
  local j=0
  for i in "${cmdA[@]}" ; do
    ignoreError=
    if [ "x${i:0:1}" = x- ]; then
      i=${i:1}
      ignoreError=1
    fi

    j=$((j+1))
    jj=$(printf "%02d" $j)
    echo
    echo "%%---------------------------------%%"
    echo "   " $jj: $i
    echo "%%---------------------------------%%"
    echo

    eval $i
    if [ -z "$ignoreError" -a $? != 0 ]; then
      break
    fi
  done
}

BUILD_TYPE="standard"
if [ "$1" = "-e" ]; then
  BUILD_TYPE="EXPERIMENTAL"
  echo BUILD_TYPE: $BUILD_TYPE
fi

myhost=$(hostname -f)
myhost=${myhost%.tacc.utexas.edu}
first=${myhost%%.*}
SYSHOST=${myhost#*.}
SUDO=""

cat > /tmp/stampede.build.$$ <<EOF
/tmp/moduleData/cacheDir:/tmp/losf_last_update
EOF

cat > /tmp/ls4.build.$$ <<EOF
$HOME/a/moduleData/cacheDir: $HOME/a/moduleData/losf_last_update
$HOME/a/moduleData/XSEDE/cacheDir: $HOME/a/moduleData/XSEDE/last_update
EOF


if [ -n "$LUA_PATH" ]; then
   MAKE_EXTRA="LUA_PATH=$LUA_PATH LUA_CPATH=$LUA_CPATH"
fi


case $SYSHOST in
  rios | mijo | jedrik | vato | vmijo | devo | xalt-lmod )
    SUDO="sudo"
    base="/opt/apps"
    ADMIN_DIR=/opt/moduleData
    UPDATE_FN=$ADMIN_DIR/system.txt
    CACHEDIRS=$ADMIN_DIR/cacheDir
    EXTRA="--with-spiderCacheDir=$CACHEDIRS  --with-updateSystemFn=$UPDATE_FN "

    if [ "$SYSHOST" == "mijo" ]; then
      EXTRA="$EXTRA --with-exportedModuleCmd=no"
    fi
    ;;

  ls4 | maverick | stampede | wrangler)
    base="$HOME/l/pkg"
    ADMIN_DIR="$HOME/a/moduleData"
    UPDATE_FN=$ADMIN_DIR/system.txt

    if [ $SYSHOST == "stampede" ]; then
       if [ -x $HOME/.up/bin/arch.py ]; then
	   base="$base/$($HOME/.up/bin/arch.py)"
       else
	   base="$base/$(uname -m)"
       fi
    fi
    EXTRA="--with-spiderCacheDescript=/tmp/$SYSHOST.build.$$"
    SITE_PKG="contrib/TACC/*.lua"
    ;;

  gligar.os)
    ADMIN_DIR=/apps/gent/lmodcache/
    UPDATE_FN=$ADMIN_DIR/timestamp
    CACHEDIRS=$ADMIN_DIR
    EXTRA="--with-spiderCacheDir=$CACHEDIRS  --with-updateSystemFn=$UPDATE_FN --with-cachedLoads=yes"
    base="$HOME/l/pkg";;

  *)
    ADMIN_DIR=$HOME/w/moduleData
    UPDATE_FN=$ADMIN_DIR/system.txt
    CACHEDIRS=$ADMIN_DIR/cacheDir
    EXTRA="--with-spiderCacheDir=$CACHEDIRS  --with-updateSystemFn=$UPDATE_FN "
    base="$HOME/l/pkg"
    ;;
esac
BASE_DIR=$base

pkgName=lmod
PKG=$BASE_DIR/$pkgName/$PKG_VERSION

EXTRA_CMD="echo "
if [ -n "$SITE_PKG" ]; then
   EXTRA_CMD="$SUDO cp $SITE_PKG $PKG/libexec"
fi

rm -f config.status config.log

MAKE=make
command -v remake 2>&1 > /dev/null
if [ "$?" = 0 ]; then
  MAKE=remake
fi

cmdA=("-$MAKE distclean"
      "./configure --prefix=$BASE_DIR --with-ancient=86401 --with-shortTime=10.3 --with-settarg=FULL --with-duplicatePaths=yes $EXTRA"
      "$SUDO  rm -rf $BASE_DIR/$pkgName/orig"
      "-$SUDO cp -r $BASE_DIR/$pkgName/$PKG_VERSION $BASE_DIR/$pkgName/orig"
      "$SUDO  rm -f $PKG/../$pkgName"
      "-$SUDO ln -s orig $PKG/../$pkgName"
      "make_install"
      "$EXTRA_CMD"
      "$SUDO  rm -rf $BASE_DIR/$pkgName/orig"
      "$MAKE clobber"
      )


runMe "${cmdA[@]}"

rm -rf /tmp/{stampede,ls4}.build.$$
