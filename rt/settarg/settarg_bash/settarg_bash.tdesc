-- -*- lua -*-
local testName = "settarg_bash"
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {testName,"settarg" },

   active = 1,
   testName = testName,
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     unsetSTT
     clearTARG
     initStdEnvVars
     unset SETTARG_TAG1
     unset SETTARG_TAG2
     MODULEPATH=$(testDir)/../mf/Core;     export MODULEPATH
     MODULEPATH_ROOT=$(testDir)/../mf;     export MODULEPATH_ROOT
     TARG_RTM="Is Great";                  export TARG_RTM

     cp $(projectDir)/settarg/settarg_rc.lua  .settarg.lua

     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d

     runLmod --version                              # 1
     runLmod load settarg                           # 2
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua -s bash --no_cpu_model dbg       # 3
     SETTARG_TAG1="obj";                   export SETTARG_TAG1
     SETTARG_TAG2="__";                    export SETTARG_TAG2
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua -s bash --no_cpu_model opt       # 4
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua -s bash --no_cpu_model empty     # 5
     runLmod load gcc mpich                         # 6
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua -s bash --no_cpu_model           # 7
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua -s bash --no_cpu_model f_f       # 8
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua -s bash --no_cpu_model b:b       # 9
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua -s bash --no_cpu_model -r f_f    #10
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua -s bash --no_cpu_model -r b:b    #11
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua -s bash --no_cpu_model f_f b:b   #12
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua -s bash --no_cpu_model --stt dbg #13
     runMe lua $(projectDir)/settarg/settarg_cmd.in.lua -s bash --no_cpu_model --purge   #14
     runBase echo "TARG_RTM: $TARG_RTM"                                                  #15
     runLmod show settarg                           #16
     runLmod unload settarg                         #17

     HOME=$ORIG_HOME

     cat _stdout.[0-9][0-9][0-9] > _stdout.orig
     joinBase64Results -bash _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f results.csv
     wrapperDiff --csv results.csv $(testDir)/out.txt out.txt
     wrapperDiff --csv results.csv $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) results.csv
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
