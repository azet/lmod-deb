-- -*- lua -*-
local testName = "colorize"
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module colorize
   ]],
   keywords = {testName },

   active = 1,
   testName = testName,
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH=$(testDir)/mf;     export MODULEPATH
     export TERM=xterm

     rm -f  _stderr.* _stdout.* err.* out.*
     rm -fr .lmod.d .lmodrc.lua

     cp $(testDir)/.lmodrc.lua .lmodrc.lua

     runLmod --version                  # 1
     export LMOD_COLORIZE=FORCE
     export LMOD_TERM_WIDTH=59
     runLmod avail                      # 2
     export LMOD_TERM_WIDTH=71
     runLmod avail                      # 3
     export LMOD_TERM_WIDTH=76
     runLmod avail                      # 4
     export LMOD_TERM_WIDTH=85
     runLmod avail                      # 5
     export LMOD_TERM_WIDTH=97
     runLmod avail                      # 6
     export LMOD_TERM_WIDTH=108
     runLmod avail                      # 7
     export LMOD_TERM_WIDTH=119
     runLmod avail                      # 8

     HOME=$ORIG_HOME



     cat _stdout.[0-9][0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f results.csv
     wrapperDiff --csv results.csv $(testDir)/out.txt out.txt
     wrapperDiff --csv results.csv $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) results.csv
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
