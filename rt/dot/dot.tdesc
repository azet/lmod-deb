-- -*- lua -*-

local testName = "dot"
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {testName },

   active = 1,
   testName = testName,
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH=$(testDir)/mf;  export MODULEPATH

     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d .lmodrc.lua
     cp $(projectDir)/init/lmodrc.lua .lmodrc.lua
     mkdir -p .lmod.d/.cache

     runLmod --version             # 1
     runLmod spider                # 2
     runLmod avail                 # 3
     runLmod load a/.1.0           # 4
     runLmod list                  # 5
     runLmod purge                 # 6
     buildModuleT $LMOD_DEFAULT_MODULEPATH > $HOME/.lmod.d/.cache/moduleT.lua
     buildDbT     $LMOD_DEFAULT_MODULEPATH > $HOME/.lmod.d/.cache/dbT.lua
     runLmod spider                # 7
     runLmod spider b              # 8
     runLmod spider b/.2.0         # 9
     runLmod spider b/1.0          #10
     runLmod spider B              #11
     runLmod spider B/1.0          #12
     runLmod spider B/.2.0         #13
     runLmod spider a              #14
     runLmod spider a/.1.0         #15
     runLmod avail                 #16
     runLmod load a/.1.0 b/.2.0    #17
     runLmod list                  #18


     HOME=$ORIG_HOME
     cat _stdout.[0-9][0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f results.csv
     wrapperDiff --csv results.csv $(testDir)/out.txt out.txt
     wrapperDiff --csv results.csv $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) results.csv
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
