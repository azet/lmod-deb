-- -*- lua -*-
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"inherit" },

   active = 1,
   testName = "inherit",
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH_ROOT=$(testDir)/mf;     export MODULEPATH_ROOT

     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d

     runLmod --version                    # 1
     runLmod use -a $(testDir)/mf/Linux $(testDir)/mf/Core $(testDir)/mf/Core2
     runLmod load   junk                  # 3
     runLmod list                         # 4
     runLmod unload junk                  # 5
     runLmod load junk2                   # 6
     runLmod use $(testDir)/pmf/core      # 7
     runLmod load intel                   # 8
     runLmod load mpich                   # 9
     runLmod load p4est                   #10
     runLmod list                         #11
     runLmod swap mpich openmpi           #12
     runLmod swap intel gcc               #13
     runLmod list                         #14
     runLmod purge                        #15

     HOME=$ORIG_HOME

     cat _stdout.[0-9][0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f results.csv
     wrapperDiff --csv results.csv $(testDir)/out.txt out.txt
     wrapperDiff --csv results.csv $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) results.csv
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
