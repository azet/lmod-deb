-- -*- lua -*-
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {"TACC","tacc" },

   active   = 1,
   testName = "tacc",
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     ORIGPATH=$PATH
     MODULEPATH=$(projectDir)/mf/TACC;  export MODULEPATH
     MODULEPATH_ROOT=$(projectDir)/mf;  export MODULEPATH_ROOT

     rm -fr _stderr.* _stdout.* err.* out.* .lmod.d

     runLmod --version              # 1
     runLmod avail                  # 2
     runLmod load TACC              # 3
     runLmod help mvapich1          # 4
     runLmod list                   # 5
     runLmod --latest load pgi      # 6
     runLmod list                   # 7
     runLmod load pgi               # 8
     runLmod list                   # 9
     runLmod --latest swap pgi pgi  #10
     runLmod list                   #11
     runLmod unload cluster         #12
     runLmod purge                  #13
     runLmod use $(testDir)/mf/Core #14
     runLmod show gatk              #15
     runLmod load gatk              #16
     runLmod unload gatk            #17
     runLmod load stir              #18


     PATH=$ORIGPATH
     HOME=$ORIG_HOME

     cat _stdout.[0-9][0-9][0-9] > _stdout.orig
     joinBase64Results -bash _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f results.csv
     wrapperDiff --csv results.csv $(testDir)/out.txt out.txt
     wrapperDiff --csv results.csv $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) results.csv
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
